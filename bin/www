#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('myapp:server');
var http = require('http');
var cluster = require('cluster');
var cpuCount = require('os').cpus().length;
var WebSocketServer = require('websocket').server;

/**
 * Get port from environment and store in Express.
 */

/**
 * Create HTTP server in worker process.
 */
var port = normalizePort(process.env.PORT || '3000');
var server = http.createServer(app);

/*
 *  WebSocket Section
 */
var wsServer = new WebSocketServer({
  httpServer: server,
  autoAcceptConnections: false
});

// create WebSocket connections array
app.clients = [];

if (cluster.isMaster) {    
  console.log('CPUs: ' + cpuCount);

  // Create a worker for each CPU
  for (var i = 0; i < cpuCount ; i++) {
      cluster.fork({
        PORT: port + i
      });
  }
} else {

  console.log('HTTP server listening on port ' + port + ' at worker ' + cluster.worker.id);

  /**
   * Listen on provided port, on all network interfaces.
   */

  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);

  wsServer.on('request', onWsRequest);

  /*
   *  WebSocket Section
   */
  var wsServer = new WebSocketServer({
    httpServer: server,
    autoAcceptConnections: false
  }); 

  // create WebSocket connections array
  app.clients = [];

  function onWsConnMessage(message) {
    if (message.type == 'utf8') {
      console.log('Received message: ' + message.utf8Data);
    } else if (message.type == 'binary') {
      console.log('Received binary data.');
    }
  }

  function onWsConnClose(reasonCode, description) {
    console.log(' Peer disconnected with reason: ' + reasonCode);
  }

  function onWsRequest(request) {
    var connection = request.accept('echo-protocol', request.origin);
    console.log("WebSocket connection accepted.");
      
    app.clients.push(connection);

    connection.on('message', onWsConnMessage);
    connection.on('close', onWsConnClose);
  }

  wsServer.on('request', onWsRequest); 
}


function onWsConnMessage(message) {
  if (message.type == 'utf8') {
    console.log('Received message: ' + message.utf8Data);
  } else if (message.type == 'binary') {
    console.log('Received binary data.');
  }
}

function onWsConnClose(reasonCode, description) {
  console.log(' Peer disconnected with reason: ' + reasonCode);
}

function onWsRequest(request) {
  var connection = request.accept('echo-protocol', request.origin);
  console.log("WebSocket connection accepted.");
    
  app.clients.push(connection);

  connection.on('message', onWsConnMessage);
  connection.on('close', onWsConnClose);
}

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
